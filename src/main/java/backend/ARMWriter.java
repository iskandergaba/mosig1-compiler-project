package backend;

import java.io.PrintWriter;
import java.time.format.DateTimeFormatterBuilder;
import java.io.FileWriter;
import java.io.IOException;

import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

/**
 * Writes assembly instructions to a file
 */
public class ARMWriter {
    private PrintWriter writer;
    private ARMVerboseLevel verboseLevel;

    /**
     * Creates an ARMWriter associated to a given file. By default, verbose is off.
     * @param filename The file in which to write the output
     * @throws IOException
     */
    public ARMWriter(String filename) throws IOException {
        this.writer = new PrintWriter(new FileWriter(filename));
        this.verboseLevel = ARMVerboseLevel.NONE;
    }

    /**
     * Creates an ARMWriter associated to a given file, with a given level of verbosity.
     * @param filename The file in which to write the output
     * @param verboseLevel The level of verbosity of the output
     * @throws IOException
     */
    public ARMWriter(String filename, ARMVerboseLevel verboseLevel) throws IOException {
        this.writer = new PrintWriter(new FileWriter(filename));
        this.verboseLevel = verboseLevel;
    }

    /**
     * Writes a comment to the file
     * @param comment The comment to write (without a semicolon)
     * @throws IOException
     */
    public void comment(String comment) throws IOException {
        this.writer.printf("; %s", comment);
    }

    /**
     * Closes the writer
     * @throws IOException
     */
    public void close() throws IOException {
        this.writer.close();
    }

    /**
     * Writes a verbose header to the file
     * @throws IOException
     */
    public void fileHeader() throws IOException {
        if (this.verboseLevel != ARMVerboseLevel.NONE) {
            this.writer.printf("; ARM generated by mincamlc on %s", 
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(LocalDateTime.now()));
        }
    }
}